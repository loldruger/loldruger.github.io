//@ts-check

/**
 * Defines the type for event handler functions used in the registry.
 * @typedef {(e: Event) => void} EventHandler
 */

/**
 * A simple registry to map event handler aliases (strings) to actual callback functions.
 * Used on the main thread to attach listeners after HTML is generated by workers.
 */
class EventRegistry {
    /**
     * Stores the mapping from alias (string) to the handler function.
     * @type {Map<string, EventHandler>}
     */
    #handlers = new Map();

    /**
     * Registers an event handler function with a unique alias.
     * Relies on JSDoc/ts-check for type validation of alias and callback.
     * @param {string} alias - The unique alias for the handler.
     * @param {EventHandler} callback - The event handler function.
     * @param {boolean} [overwrite=false] - Whether to allow overwriting an existing alias. Defaults to false.
     * @returns {boolean} True if registration was successful, false otherwise (e.g., alias exists and overwrite is false).
     */
    register(alias, callback, overwrite = false) {
        // Runtime type checks for alias and callback were removed as requested.
        // Relying on static analysis and calling context for correctness.

        // Check for existing alias only if overwrite is not allowed.
        if (this.#handlers.has(alias) && !overwrite) {
            console.warn(`EventRegistry Warning: Alias '${alias}' already exists. Not overwriting.`);
            return false;
        }
        this.#handlers.set(alias, callback);
        // console.log(`EventRegistry: Registered handler for alias '${alias}'.`); // Optional logging
        return true;
    }

    /**
     * Retrieves the event handler function associated with an alias.
     * Relies on JSDoc/ts-check for alias type validation.
     * @param {string} alias - The alias of the handler to retrieve.
     * @returns {EventHandler} The callback function, or undefined if the alias is not found.
     */
    getEventCallback(alias) {
        // Runtime type check for alias was removed.

        const handler = this.#handlers.get(alias);
        // Keep the logic check for handler existence, as it's not a type issue.
        if (!handler) {
            // Log a warning if no handler is found for a requested alias during lookup.
            console.warn(`EventRegistry Warning: No handler found for alias '${alias}'.`);
        }
        return handler ?? (() => { console.error(`No ${alias} event registered`); });
    }

    /**
     * Removes a handler by its alias.
     * @param {string} alias - The alias of the handler to remove.
     * @returns {boolean} True if the alias existed and was removed, false otherwise.
     */
    unregister(alias) {
        // No type check needed for alias, Map.delete handles non-string keys gracefully (returns false).
        return this.#handlers.delete(alias);
    }

    /**
     * Clears all registered handlers from the registry.
     * @returns {void}
     */
    clear() {
        this.#handlers.clear();
        console.log('EventRegistry: All handlers cleared.'); // Optional logging
    }
}

// Export a singleton instance for easy use across the main thread application code.
// This instance should be imported and used wherever handlers need to be registered or retrieved.
export const eventRegistry = new EventRegistry();